name: build
on: [push]
jobs:
  build-stage:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
    - name: Clone repo
      uses: actions/checkout@v2
    - name: .NET Restore
      shell: pwsh
      run: dotnet restore --no-cache # have to use no cache of the build will fail on Windows
    - name: Build module with help
      shell: pwsh
      run: ./Build-Module.ps1 -installDep -configuration Release -buildHelp
      if: ${{ matrix.os == 'windows-latest'}}
    - name: Build module without help
      shell: pwsh
      run: ./Build-Module.ps1 -installDep -configuration Release
      if: ${{ matrix.os != 'windows-latest'}}
    - name: Run C# unit tests
      shell: pwsh
      run: dotnet test --logger "trx;LogFileName=test-results.trx"
    - name: Publish C# test results
      uses: dorny/test-reporter@v1
      if: success() || failure()                  # run this step even if previous step failed
      with:
        name: C# tests results (${{ matrix.os }}) # name of the check run which will be created
        path: '**/test-results.trx'               # path to test results
        reporter: dotnet-trx                      # format of test results
    - name: Run PowerShell unit tests
      shell: pwsh
      run: |
        Import-Module .\dist\*.psd1
        # This loads [PesterConfiguration] into scope
        Import-Module Pester
        $pesterArgs = [PesterConfiguration]::Default
        $pesterArgs.Run.Exit = $true
        $pesterArgs.Run.PassThru = $false
        $pesterArgs.TestResult.Enabled = $true
        $pesterArgs.Output.Verbosity = "Normal"
        $pesterArgs.Run.Path = './Tests/function'
        $pesterArgs.TestResult.OutputFormat = 'JUnitXml'
        $pesterArgs.TestResult.OutputPath = 'test-results.xml'

        Invoke-Pester -Configuration $pesterArgs
    - name: Publish PowerShell test results
      uses: dorny/test-reporter@v1
      if: success() || failure()                          # run this step even if previous step failed
      with:
        name: PowerShell tests results (${{ matrix.os }}) # name of the check run which will be created
        path: '**/test-results.xml'                       # path to test results
        reporter: jest-junit                              # format of test results
  package-stage:
    name: Package Management
    needs: build-stage
    runs-on: ubuntu-latest
    steps:
    - name: Publish
      shell: pwsh
      run: Write-Output "Package module"
  testing-stage:
    name: Testing
    needs: package-stage
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
    - name: Publish
      shell: pwsh
      run: Write-Output "Run Tests on ${{ matrix.os }}"
  publish-stage:
    name: PowerShell Gallery
    needs: testing-stage
    runs-on: ubuntu-latest
    steps:
    - name: Publish
      shell: pwsh
      run: Write-Output "Publish to PowerShell Gallery"