name: build
on: [push]
jobs:
  build-stage:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
    - name: Clone repo
      uses: actions/checkout@v2
    - name: .NET Restore
      shell: pwsh
      run: dotnet restore --no-cache # have to use no cache of the build will fail on Windows
    - name: Build module with help
      if: ${{ matrix.os == 'windows-latest'}}
      shell: pwsh
      run: ./Build-Module.ps1 -installDep -configuration Release -buildHelp
    - name: Build module without help
      if: ${{ matrix.os != 'windows-latest'}}
      shell: pwsh
      run: ./Build-Module.ps1 -installDep -configuration Release
    - name: Run C# unit tests
      shell: pwsh
      run: dotnet test --logger "trx;LogFileName=test-results.trx"
    - name: Publish C# test results
      if: success() || failure()                  # run this step even if previous step failed
      uses: dorny/test-reporter@v1
      with:
        name: C# tests results (${{ matrix.os }}) # name of the check run which will be created
        path: '**/test-results.trx'               # path to test results
        reporter: dotnet-trx                      # format of test results
    - name: Run PowerShell unit tests
      shell: pwsh
      run: |
        Import-Module ./dist/*.psd1
        # This loads [PesterConfiguration] into scope
        Import-Module Pester
        $pesterArgs = [PesterConfiguration]::Default
        $pesterArgs.Run.Exit = $true
        $pesterArgs.Run.PassThru = $false
        $pesterArgs.TestResult.Enabled = $true
        $pesterArgs.Output.Verbosity = "Normal"
        $pesterArgs.Run.Path = './Tests/function'
        $pesterArgs.TestResult.OutputFormat = 'JUnitXml'
        $pesterArgs.TestResult.OutputPath = 'test-results.xml'

        Invoke-Pester -Configuration $pesterArgs
    - name: Publish PowerShell test results
      if: success() || failure()                          # run this step even if previous step failed
      uses: dorny/test-reporter@v1
      with:
        name: PowerShell tests results (${{ matrix.os }}) # name of the check run which will be created
        path: '**/test-results.xml'                       # path to test results
        reporter: jest-junit                              # format of test results

    - name: Copy Module to Artifacts Folder
      if: ${{ matrix.os == 'windows-latest'}}
      shell: pwsh
      run: |
        Copy-Item -Path "./dist/" -Destination ./staging/VSTeam/dist/ -Recurse -Force
        Copy-Item -Path "./.gitignore","./README.md" -Destination ./staging/VSTeam/ -Recurse -Force
    - name: Publish Module
      if: ${{ matrix.os == 'windows-latest'}}
      uses: actions/upload-artifact@v2
      with:
        name: module
        path: "./staging/VSTeam"

    - name: Copy Integration Tests Artifacts Folder
      if: ${{ matrix.os == 'windows-latest'}}
      shell: pwsh
      run: |
        Copy-Item -Path "./Tests/SampleFiles/" -Destination ./staging/test/Tests/SampleFiles -Recurse -Force
        Copy-Item -Path "./Tests/integration/tests/" -Destination ./staging/test/Tests/integration -Recurse -Force
        Copy-Item -Path "./dist/*.psd1" -Destination ./staging/test/dist -Recurse -Force
    - name: Publish Module
      if: ${{ matrix.os == 'windows-latest'}}
      uses: actions/upload-artifact@v2
      with:
        name: test
        path: "./staging/test"





  # Store the module
  package-stage:
    name: Package Management
    needs: build-stage
    runs-on: ubuntu-latest
    steps:
    - name: Download module
      uses: actions/download-artifact@v2
      with:
        name: module
    - name: Install NuGet 5.2.0
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: '5.2.0'
    - name: Install Module Dependencies
      shell: pwsh
      run: |
        # Load the psd1 file so you can read the required modules and install them
        $manifest = Import-PowerShellDataFile ./dist/*.psd1

        # Install each module
        $manifest.RequiredModules | ForEach-Object { Install-Module -Name $_ -Repository PSGallery -Force -Scope CurrentUser -Verbose }

    - name: Pack and push module
      shell: pwsh
      run: |
        Write-Host "Compute Version Number"

        # Load the psd1 file so you can read the version
        $manifest = Import-PowerShellDataFile ./dist/*.psd1

        $package_version = "$($manifest.ModuleVersion).${{ github.run_number }}"

        Write-Host "Package Version Number: $package_version"

        Write-Host "Create NuSpec from PSD1"

        Install-Module -Name Trackyon.Nuget -Scope CurrentUser -Force

        Write-Host "Convert psd1 into a NuSpec"

        ConvertTo-NuSpec -Path ./dist/VSTeam.psd1 -Verbose

        Write-Host "Pack module"

        Write-Host "nuget.exe pack ./dist/VSTeam.nuspec -NonInteractive -OutputDirectory ./dist -version $package_version -Verbosity Detailed"

        nuget pack ./dist/VSTeam.nuspec -NonInteractive -OutputDirectory ./dist -version $package_version -Verbosity Detailed

        Get-ChildItem -recurse

  testing-stage:
    name: Testing
    needs: package-stage
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
    - name: Test
      shell: pwsh
      run: Write-Output "Run Tests on ${{ matrix.os }}"









  publish-stage:
    name: PowerShell Gallery
    needs: testing-stage
    environment: 'PowerShell Gallery'
    runs-on: ubuntu-latest
    steps:
    - name: Publish
      shell: pwsh
      run: Write-Output "Publish to PowerShell Gallery"